define SetAlpakaRules
ifneq ($(strip $(filter alpaka/%,$($(1)_PRODUCT_TYPE))),)
$(1)_TEST_PRE_COMMAND+=export SCRAM_ALPAKA_BACKEND=${ALPAKA_BACKEND_SUFFIX_$(subst alpaka/,,$($(1)_PRODUCT_TYPE))} &&
endif
ifneq ($(strip $(filter $(DEVICE_CC_EXT),$($(1)_files_exts))),)
ifeq ($(strip $($(1)_PRODUCT_TYPE)),alpaka/cuda)
$$(eval $$(call AddCudaRules,$1,$2))
endif
ifeq ($(strip $($(1)_PRODUCT_TYPE)),alpaka/rocm)
$$(eval $$(call AddRocmRules,$1,$2))
endif
endif
endef

ifeq ($(strip $(UNITTESTING)),yes)
$(foreach b,$(self_EX_FLAGS_ALPAKA_BACKENDS),\
  $(eval $(call ShellCMDs,$(b)IsEnabled))\
  $(eval AlpakaTest_$b:=\
    $(if $(strip $(filter $(b)IsEnabled,$(CMD_$(b)IsEnabled))),\
      true,\
      $(CMD_$(b)IsEnabled)))\
  $(eval SKIP_ALPAKA_TESTS_$b:=$(shell $(AlpakaTest_$b) >/dev/null 2>&1 || $(CMD_echo) yes)))

define AlpakaTestsFlag
ifeq ($(strip $(filter alpaka-$2,$($(1)_LOC_USE))-$(SKIP_ALPAKA_TESTS_$2)),alpaka-$2-yes)
$(1)_NO_TESTRUN := yes
$(1)_TEST_SKIP_MSG:=Failed to run $(notdir $(AlpakaTest_$2))
else
ifeq ($(strip $(filter $2,$($(1)_LOC_USE))-$(SKIP_ALPAKA_TESTS_$2)),$2-yes)
$(1)_NO_TESTRUN := yes
$(1)_TEST_SKIP_MSG:=Failed to run $(notdir $(AlpakaTest_$2))
endif
endif
endef

define AlpakaTestsFlags
$(foreach x,$(self_EX_FLAGS_ALPAKA_BACKENDS),$(if $(strip $(UNITTEST_TYPES)),$(eval $(call UserTestsSelection,$1,$x)),$(eval $(call AlpakaTestsFlag,$1,$x))))
endef
endif
