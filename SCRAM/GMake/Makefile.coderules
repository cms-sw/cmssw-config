.PHONY: code-format code-format-dump-config code-format/$(SCRAM_SOURCEDIR)/% code-checks-run code-checks code-checks-apply code-checks-internal code-checks-dump-config code-checks-all
CODE_CHECKS_CONFIG_FILE:=$(wildcard $(LOCALTOP)/$(SCRAM_SOURCEDIR)/.clang-tidy)
CODE_FORMAT_CONFIG_FILE:=$(wildcard $(LOCALTOP)/$(SCRAM_SOURCEDIR)/.clang-format)
ifeq ($(strip $(CODE_CHECKS_CONFIG_FILE)),)
DEFAULT_CODE_CHECKS:=-checks='-*,boost-use-to-string,misc-string-compare,misc-uniqueptr-reset-release,modernize-deprecated-headers,modernize-make-shared,modernize-use-bool-literals,modernize-use-equals-delete,modernize-use-nullptr,modernize-use-override,performance-unnecessary-copy-initialization,readability-container-size-empty,readability-redundant-string-cstr,readability-static-definition-in-anonymous-namespace,readability-uniqueptr-delete-release'
else
DEFAULT_CODE_CHECKS:=
endif
ifeq ($(strip $(CODE_FORMAT_CONFIG_FILE)),)
DEFAULT_CODE_FORMAT:=-style='Google'
else
DEFAULT_CODE_FORMAT:=
endif
CODE_CHECKS_ARG:=$(if $(strip $(USER_CODE_CHECKS)),-checks='-*$(comma)$(USER_CODE_CHECKS)',$(DEFAULT_CODE_CHECKS))
CODE_FORMAT_ARG:=$(if $(strip $(USER_CODE_FORMAT)),-style='$(USER_CODE_FORMAT)',$(DEFAULT_CODE_FORMAT))
ALL_CodeCheckRules:=
ALL_CodeFormatRules:=
define CodeCheckRule
ALL_CodeCheckRules+=$(WORKINGDIR)/code-checks/$1.yaml
$(WORKINGDIR)/code-checks/$1.yaml: $(SCRAM_SOURCEDIR)/$1
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) &&\
	$(CMD_echo) clang-tidy $(USER_CODE_CHECKS_ARGS) -export-fixes $$@ $(CODE_CHECKS_ARG) -header-filter "'$(LOCALTOP)/$(SCRAM_SOURCEDIR)/.*'" $$< &&\
	clang-tidy             $(USER_CODE_CHECKS_ARGS) -export-fixes $$@ $(CODE_CHECKS_ARG) -header-filter '$(LOCALTOP)/$(SCRAM_SOURCEDIR)/.*'   $$< &&\
	$(CMD_touch) $$@
endef
define CodeFormatRule
ALL_CodeFormatRules+=code-format/$1
code-format/$1: $(SCRAM_SOURCEDIR)/$1
	@$(CMD_echo) clang-format $(USER_CODE_FORMAT_ARGS) $(CODE_FORMAT_ARG) -i $$< &&\
	clang-format              $(USER_CODE_FORMAT_ARGS) $(CODE_FORMAT_ARG) -i $$<
endef
NO_CODE_CHECKS_APPLY_MSG:=
ifeq ($(strip $(filter code-checks-all,$(MAKECMDGOALS))),code-checks-all)
NO_CODE_CHECKS_APPLY_MSG:=:
endif
code-checks-dump-config:
	clang-tidy $(USER_CODE_CHECKS_ARGS) $(CODE_CHECKS_ARG) -dump-config $(CODE_CHECKS_CONFIG_FILE)
code-format-dump-config:
	clang-format $(USER_CODE_FORMAT_ARGS) $(CODE_FORMAT_ARG) -dump-config $(CODE_FORMAT_CONFIG_FILE)
code-checks-run: llvm-ccdb
	@$(MAKE) -f $(SCRAM_MAKEFILE) code-checks-internal
	@$(NO_CODE_CHECKS_APPLY_MSG) $(CMD_echo) "You can run 'scram build code-checks-apply' to apply the changes"
code-checks-all: code-checks-run
	@$(MAKE) -f $(SCRAM_MAKEFILE) code-checks-apply
code-checks-apply:
	@if [ -d $(WORKINGDIR)/code-checks ] ; then \
	  if [ "$(USER_CODE_CHECKS_CHANGE_ONLY)" = "YES" ] ; then $(LOCALTOP)/$(SCRAM_CONFIGDIR)/SCRAM/fix-code-checks-yaml.py $(WORKINGDIR)/code-checks ; fi &&\
	  $(CMD_echo) clang-apply-replacements $(USER_CODE_CHECKS_APPLY_ARGS) $(WORKINGDIR)/code-checks &&\
	  clang-apply-replacements $(USER_CODE_CHECKS_APPLY_ARGS) $(WORKINGDIR)/code-checks &&\
	  $(CMD_rm) -rf $(WORKINGDIR)/code-checks ;\
	fi
ifneq ($(strip $(filter code-format,$(MAKECMDGOALS))),)
  CODE_CHECK_FILES:=
  ifeq ($(strip $(USER_CODE_FORMAT_FILES)$(USER_CODE_FORMAT_FILE)),)
    CODE_CHECK_FILES:=$(patsubst $(SCRAM_SOURCEDIR)/%,%,$(shell find $(SCRAM_SOURCEDIR) -regex '.*\.\(cpp\|hpp\|cc\|cxx\|h\)'))
  else ifneq ($(strip $(USER_CODE_FORMAT_FILE)),)
    CODE_CHECK_FILES:=$(patsubst $(SCRAM_SOURCEDIR)/%,%,$(shell $(CMD_cat) $(USER_CODE_FORMAT_FILE)))
  else
    CODE_CHECK_FILES:=$(patsubst $(SCRAM_SOURCEDIR)/%,%,$(USER_CODE_FORMAT_FILES))
  endif
  $(foreach f,$(CODE_CHECK_FILES),$(eval $(call CodeFormatRule,$f)))
code-format: $(ALL_CodeFormatRules)
	@:
endif
ifneq ($(strip $(filter code-checks-internal,$(MAKECMDGOALS))),)
  CODE_CHECK_FILES:=
  ifeq ($(strip $(USER_CODE_CHECKS_FILES)$(USER_CODE_CHECKS_FILE)),)
    CODE_CHECK_FILES:=$(patsubst $(LOCALTOP)/$(SCRAM_SOURCEDIR)/%,%,$(shell python -c 'import json;print "\n".join([x["file"] for x in  json.load(open("compile_commands.json"))])'))
  else ifneq ($(strip $(USER_CODE_CHECKS_FILE)),)
    CODE_CHECK_FILES:=$(patsubst $(SCRAM_SOURCEDIR)/%,%,$(shell $(CMD_cat) $(USER_CODE_CHECKS_FILE)))
  else
    CODE_CHECK_FILES:=$(patsubst $(SCRAM_SOURCEDIR)/%,%,$(USER_CODE_CHECKS_FILES))
  endif
  $(foreach f,$(CODE_CHECK_FILES),$(eval $(call CodeCheckRule,$f)))
code-checks-internal: $(ALL_CodeCheckRules)
	@:
endif
$(WORKINGDIR)/code-checks-logs/changed-files-all.log: FORCE_TARGET
	@$(CMD_rm) -rf $(@D) &&\
	$(CMD_mkdir) -p $(@D) &&\
	$(CMD_cd) $(LOCALTOP)/$(SCRAM_SOURCEDIR) &&\
	if [ "$(USER_CODE_CHECKS_FILE)" != "" ] ; then \
	  $(CMD_cat) $(USER_CODE_CHECKS_FILE) > $(LOCALTOP)/$@ ;\
	else \
	  $(CMD_git) diff --name-only $(CMSSW_VERSION) > $(LOCALTOP)/$@ ;\
	fi
$(WORKINGDIR)/code-checks-logs/changed-files-selected.log: $(WORKINGDIR)/code-checks-logs/changed-files-all.log llvm-ccdb
	@$(CMD_touch) $@ &&\
	for f in $$($(CMD_cat) $< | grep -v '/test/') ; do $(CMD_echo) $$f >> $@; done
code-checks: $(WORKINGDIR)/code-checks-logs/changed-files-selected.log
	@if [ -s $< ] ; then \
	  $(MAKE) -f $(SCRAM_MAKEFILE) code-checks-all USER_CODE_CHECKS_CHANGE_ONLY=YES USER_CODE_CHECKS_FILE=$< ;\
	else \
	  $(CMD_echo) ">> No changed files found: No running code-checks" ;\
	fi
