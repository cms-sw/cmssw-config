LCGDICT_FILE_PREFIX = $(1)_
TOP_LEVEL_VARIABLES+=LCGDICT
#Both CXXMODULES_DIR and RELEASE_CXXMODULES_DIR should have same number of dirs
CXXMODULES_DIR:=tmp/$(SCRAM_ARCH)/cxxmodules
RELEASE_CXXMODULES_DIR:=include/$(SCRAM_ARCH)/cxxmodules
CXXMODULES_DIR_RELPAH:=$(shell $(CMD_echo) $(CXXMODULES_DIR) | $(CMD_sed) 's|[a-zA-Z0-9_-]*|..|g')
MODULEMAP_FILE:=module.modulemap
DEPENDENCY_ORDER_FUNCTION_ROOTPCMS:=SetRootPCMSRules
EXTRA_TOP_LEVEL_BUILD_RULES+=ExtraPCMsRules

define generate_full_modulemap
 $(CMD_rm) -f $@ $(RELEASE_CXXMODULES_DIR)/$(MODULEMAP_FILE) &&\
 $(CMD_touch) $@ &&\
 for m in $$($(CMD_find) $(@D) -maxdepth 2 -name cxxmodule -type f) ; do\
   $(CMD_cat) $$m >> $@;\
 done
endef

define ExtraPCMsRules
ifneq ($(strip $(ALL_PCMS)),)
$(CXXMODULES_DIR)/$(MODULEMAP_FILE): $(ALL_MODULEMAPS)
	@$$(call generate_full_modulemap)
cxxmodules: $(filter lib/$(SCRAM_ARCH)/$(patsubst /%,%,$(subst src,,$(THISDIR)))%,$(ALL_PCMS))
	@:
else
.PHONY: $(CXXMODULES_DIR)/$(MODULEMAP_FILE) cxxmodules
$(CXXMODULES_DIR)/$(MODULEMAP_FILE):
	@:
cxxmodules:
	@:
endif
endef

define SetRootPCMSRules
$(WORKINGDIR)/rootpcms/$1: $(foreach l,$($(1)_LOC_USE) $($(1)_LOC_FLAGS_USE_SOURCE_ONLY),$(WORKINGDIR)/rootpcms/$($l))
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
endef

ifneq ($(strip $(wildcard $(SCRAM_CONFIGDIR)/SCRAM/GMake/CXXModules.mk)),)
-include $(SCRAM_CONFIGDIR)/SCRAM/GMake/CXXModules.mk
endif
define lcg_included_headers
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_echo) ">> Searching already included headers in $<" &&\
  $(CMD_grep) '"$($(1)_PROD_PACKAGE)/interface/' $< | $(CMD_grep) '^ *#include *"' | $(CMD_sed) 's|.*include *"||;s|".*||' | $(CMD_sort) | $(CMD_uniq) > $@
endef

define lcg_ignored_headers
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $@ && $(CMD_touch) $@ &&\
  $(CMD_echo) $($(1)_LOC_FLAGS_IGNORE_MODULE_FILE) | $(CMD_tr) ' ' '\n' | $(CMD_xargs) -i $(CMD_echo) '.*/{}' >> $@
endef

define lcg_all_headers
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_echo) ">> Searching all header under $($(1)_PROD_PACKAGE)/interface" &&\
  if [ -e $(SCRAM_SOURCEDIR)/$($(1)_PROD_PACKAGE)/interface ] ; then \
    $(CMD_find) $(SCRAM_SOURCEDIR)/$($(1)_PROD_PACKAGE)/interface -maxdepth 1 -name '*.h' | $(CMD_sed) 's|^$(SCRAM_SOURCEDIR)/||' > $@ ;\
  else \
    $(CMD_touch) $@ ;\
  fi
endef

define lcg_full_header
  $(CMD_cp) -P $< $@ && $(CMD_echo) ">> Adding remaining headers in $<" &&\
  $(CMD_grep) -v -f $(@D)/$(2)r.ignore -f $(@D)/$(2)r.included $(@D)/$(2)r.all | $(CMD_xargs) -i $(CMD_echo) '#include "{}"' >> $@
endef

define compile_lcgdict
  $(startlog_$(2)) [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) ">> Compiling LCG dictionary: $<" &&\
  $(VERB_ECHO)                   $(CXX) $(CXX_MMD) $(CXX_MF) $(1)/$(patsubst $($(1)_objdir)/%,%,$(basename $@).d) $(COMPILE_OPTIONS) -I$(LOCALTOP) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS CXXFLAGS) $(CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS) $(1)/$(patsubst $($(1)_objdir)/%,%,$<) -o $(1)/$(patsubst $($(1)_objdir)/%,%,$@) &&\
  (($(CMD_cd) $($(1)_objdir)/..; $(CXX) $(CXX_MMD) $(CXX_MF) $(1)/$(patsubst $($(1)_objdir)/%,%,$(basename $@).d) $(COMPILE_OPTIONS) -I$(LOCALTOP) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS CXXFLAGS) $(CXXOPTIMISEDFLAGS) $(CXXSHAREDOBJECTFLAGS) $(1)/$(patsubst $($(1)_objdir)/%,%,$<) -o $(1)/$(patsubst $($(1)_objdir)/%,%,$@)) || ($(CMD_touch) -t $(OLD_TIMESTAMP) $< && exit 1)) $(endlog_$(2))
  @$(startlog_$(2))$(call processTmpMMDData,$(1)/$(patsubst $($(1)_objdir)/%,%,$<),$(1)/$(patsubst $($(1)_objdir)/%,%,$@),$3)$(endlog_$(2))
endef

#LCG Module map
define generate_modulemap
  $(CMD_echo) ">> Generated modulemap for $($(1)_PROD_PACKAGE)" &&\
  [ -d $(@D) ] || $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) "module \"$(1)\" {" > $@ &&\
  for inc in `$(CMD_grep) '"$($(1)_PROD_PACKAGE)/interface/' $< | $(CMD_grep) -v -f $(3)/$(2)r.ignore | $(CMD_grep) '^ *# *include *"' | $(CMD_sed) 's|.*include *"||;s|".*||' | $(CMD_sort) | $(CMD_uniq)`; do \
    hdr=`$(CMD_echo) $$inc | $(CMD_sed) 's|.*/||'` ;\
    $(CMD_echo) "  module \"$$hdr\" { header \"$(CXXMODULES_DIR_RELPAH)/$(SCRAM_SOURCEDIR)/$$inc\" export * }" >> $@ ;\
  done &&\
  $(CMD_echo) "  export *" >> $@ &&\
  $(CMD_echo) "}" >> $@
endef

#LCG dictionary generation
define generate_classes_h
  $(startlog_$(2))[ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $@ &&\
  $(CMD_echo) ">> Generating LCG reflex dict header file $(patsubst $(LOCALTOP)/$(SCRAM_SOURCEDIR)/%,%,$<)" &&\
  $(VERB_ECHO) $(CLASSES_H_GENERATOR) $< &&\
  (            $(CLASSES_H_GENERATOR) $< > $@ || ($(CMD_rm) -f $@ && exit 1)) \
  $(endlog_$(2))
endef

define generate_classes_all_h
  [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) Generating $@&&\
  $(CMD_cat) $? > $@
endef

define generate_classes_all_def_xml
  [ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) &&\
  $(CMD_echo) Generating $@ &&\
  $(CMD_echo) '<lcgdict>' > $@.tmp &&\
  $(CMD_cat) $? | sed 's|<lcgdict>||i;s|</lcgdict>||i' >> $@.tmp &&\
  $(CMD_echo) '</lcgdict>' >> $@.tmp &&\
  $(CMD_mv) $@.tmp $@
endef

define generate_lcgdict_cxxmodule
  $(startlog_$(2))[ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $@ &&\
  $(CMD_echo) ">> Building LCG reflex dict from header file $(patsubst $(LOCALTOP)/%,%,$4)" &&\
  $(VERB_ECHO)                $(ROOTCLING) -f $@ -s $(@D)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $($(5)_GENREFLEX_ARGS) $(call Tool_DependencyPCMS,$1) $(GENREFLEX_CPPFLAGS) -I$(LOCALTOP)/$(CXXMODULES_DIR) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS) $(4) $(3) &&\
  (($(SCRAM_GENREFLEX_PREFIX) $(ROOTCLING) -f $@ -s $(@D)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $($(5)_GENREFLEX_ARGS) $(call Tool_DependencyPCMS,$1) $(GENREFLEX_CPPFLAGS) -I$(LOCALTOP)/$(CXXMODULES_DIR) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS) $(4) $(3) &&\
    if [ -f $(@D)/_Builtin_intrinsics.pcm ] ; then \
      mv $(@D)/_Builtin_intrinsics.pcm $(6)/;\
    fi &&\
    if [ `$(CMD_ls) $(@D)/*.pcm | $(CMD_grep) -v '/$(1).pcm' | wc -l` -gt 0 ] ; then \
      $(CMD_echo) "*** ERROR:$1: Generated PCM for other packages" ; $(CMD_ls) $(@D)/*.pcm | $(CMD_grep) -v '/$(1).pcm' ; \
    fi &&\
    $(CMD_touch) -r $@ $(@D)/$(1).pcm && $(CMD_mv) $(@D)/$(1).pcm $(6)/) || ($(CMD_rm) -f $@ && exit 1)) \
  $(endlog_$(2))
endef

define generate_lcgdict
  $(startlog_$(2))[ -d $(@D) ] ||  $(CMD_mkdir) -p $(@D) && $(CMD_rm) -f $@ &&\
  $(CMD_echo) ">> Building LCG reflex dict from header file $(patsubst $(LOCALTOP)/%,%,$4)" &&\
  $(VERB_ECHO)               $(ROOTRFLX_BASE)/bin/genreflex $(4) -s $(3) -o $@ $(subst -inlineInputHeader,,$(subst -failOnWarnings,--fail_on_warnings,$($(5)_GENREFLEX_ARGS))) --rootmap=$(6)/$(basename $(@F)).rootmap --rootmap-lib=$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $(call Tool_DependencyPCMS,$1) $(GENREFLEX_CPPFLAGS) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS) &&\
  (($(SCRAM_GENREFLEX_PREFIX) $(ROOTRFLX_BASE)/bin/genreflex $(4) -s $(3) -o $@ $(subst -inlineInputHeader,,$(subst -failOnWarnings,--fail_on_warnings,$($(5)_GENREFLEX_ARGS))) --rootmap=$(6)/$(basename $(@F)).rootmap --rootmap-lib=$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX) $(call Tool_DependencyPCMS,$1) $(GENREFLEX_CPPFLAGS) $(call AdjustFlags,$1,LCGDICT,CPPFLAGS) &&\
  $(CMD_touch) -r $@ $(6)/$(basename $(@F)).rootmap $(basename $@)*.pcm && $(CMD_mv) $(basename $@)*.pcm $(6)/) || ($(CMD_rm) -f $@ && exit 1)) \
  $(endlog_$(2))
endef

#safename,hfiles,defxmlfiles,prodstore,genreflexargs,Cababilities
define LCGDict
$(eval $(call LCGDictHeaders,$1,$2,$3,$5,$6))
$(1)_CLASSES_DEF_XML:=$3
$(eval $(call AddLCGDictRule,$(1),$($1_lcg_header),$($1_lcg_def_xml),$(1)$(6),a,$(4),$($(1)_LCGDICTS)))
ALL_CLASS_VERSION_RULES += $($(1)_objdir)/updateclassversion
$(WORKINGDIR)/rootpcms/$1: $(foreach x,$($1_LCGDICTS),$(WORKINGDIR)/rootpcms/$1_$(x))
	@$(CMD_touch) $$@
ifneq ($(strip $(UPDATE_CLASSVERSION)),)
all_$(1)       += $($(1)_objdir)/updateclassversion
$($(1)_objdir)/updateclassversion: $($(1)_objdir)/$(MODULE_PREFIX)$(1).$(SHAREDSUFFIX)
	@$(CMD_touch) $$@
endif
endef

##safename,hfiles,defxmlfiles,genreflexargs,name
define LCGDictHeaders
$(1)_prodsrc += $(patsubst src/%,%,$2 $3)
$(1)$(5)_GENREFLEX_ARGS := $(filter-out $($(1)_LOC_FLAGS_REM_GENREFLEX_ARGS),$(4))
$1_lcg_header:=$2
$1_lcg_def_xml:=$3
ifeq ($(strip $($(1)_CXXMODULES)),1)
$(1)$(5)_GENREFLEX_ARGS := -cxxmodule $$($(1)$(5)_GENREFLEX_ARGS)
ifneq ($(strip $(words $2)),1)
$1_lcg_header:=$($(1)_objdir)/a/$(1)_all.h
$1_lcg_def_xml:=$($(1)_objdir)/a/$(1)_all_def.xml
$1_LCGDICTS:=x
$($(1)_objdir)/a/$(1)_all.h: $2 $($(1)_config)
	@$$(call generate_classes_all_h,$1,$2)
$($(1)_objdir)/a/$(1)_all_def.xml: $3 $($(1)_config)
	@$$(call generate_classes_all_def_xml,$1,$3)
endif
endif
endef

define AddLCGDictRule
$(if $(2),$(eval $(call LCGDictRule,$(1),$(LCGDICT_FILE_PREFIX)$(firstword $(7)),$(firstword $(2)),$(firstword $(3)),$(4),$(5),$(6)))$(eval $$(call AddLCGDictRule,$(1),$(wordlist 2,100,$(2)),$(wordlist 2,100,$(3)),$(4),$(5),$(6),$(wordlist 2,100,$(7)))),)
endef

define LCG_ExtraRules
$(WORKINGDIR)/rootpcms/$(1): $(foreach l, $($(1)_EX_USE) $($(1)_EX_FLAGS_USE_SOURCE_ONLY),$(WORKINGDIR)/rootpcms/$($l))
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
endef

define LCGDictRule
$(1)_LOC_USE += $(LCGDICT_DEPS)
$(1)_files  := $($(1)_objdir)/$(6)/$(2)r.cc        $($(1)_files)
$(1)_objs   := $($(1)_objdir)/$(6)/$(2)r.cc.$(OBJEXT) $($(1)_objs)
$(1)_extra_files += $($(1)_objdir)/$(6)/$(2)r.cc
ifneq ($(strip $(filter $(LOCALTOP)/$(WORKINGDIR)/classes/%,$3)),)
$3: $4
	@$$(call generate_classes_h)
endif
$(2)r_header:=$3
ifeq ($(strip $($(1)_CXXMODULES)),1)
DEPENDENCY_ORDER_VARIABLES+=ROOTPCMS
$(1)_pcm_name:=$(1).pcm
$(2)r_header:=$($(1)_objdir)/$(6)/$(2)r.h
ALL_MODULEMAPS+=$(CXXMODULES_DIR)/$(1)/cxxmodule
$(CXXMODULES_DIR)/$(1)/cxxmodule: $($(1)_objdir)/$(6)/$(2)r.h | $(WORKINGDIR)/release.cxxmodule
	@$$(call generate_modulemap,$1,$2,$($(1)_objdir)/$(6))
$($(1)_objdir)/$(6)/$(2)r.cc: $($(1)_objdir)/$(6)/$(2)r.h | $(CXXMODULES_DIR)/$(MODULEMAP_FILE)
$($(1)_objdir)/$(6)/$(2)r.included: $3 $($(1)_config)
	@$$(call lcg_included_headers,$1)
$($(1)_objdir)/$(6)/$(2)r.ignore: $($(1)_config)
	@$$(call lcg_ignored_headers,$1)
$($(1)_objdir)/$(6)/$(2)r.all: $(wildcard $(SCRAM_SOURCEDIR)/$($(1)_PROD_PACKAGE)/interface) $($(1)_config)
	@$$(call lcg_all_headers,$1)
$($(1)_objdir)/$(6)/$(2)r.h: $3 $($(1)_objdir)/$(6)/$(2)r.included $($(1)_objdir)/$(6)/$(2)r.all $($(1)_objdir)/$(6)/$(2)r.ignore
	@$$(call lcg_full_header,$1,$2)
else
$(1)_pcm_name:=$(2)r_rdict.pcm
all_$(1)  += $(7)/$(2)r.rootmap
$(1)_libdeps += $(7)/$(2)r.rootmap
$(7)/$(2)r.rootmap: $($(1)_objdir)/$(6)/$(2)r.cc
	@$(CMD_echo) "01:$(CMD_rm) -f $(7)/$(2)r.rootmap $(WORKINGDIR)/rootpcms/$(1)" > $$(call AutoCleanFile,$$<,lcgdict)
	@[ -f $$< ] || $(CMD_rm) -f $$@
endif
$(1)_ROOTPCMS += $(7)/$$($(1)_pcm_name)
all_$(1)  += $(7)/$$($(1)_pcm_name)
ALL_PCMS  += $(7)/$$($(1)_pcm_name)
$(eval $(call AddBigObjLCGDICTRule,$1,$(6)/$(2),$(7),$$($(1)_pcm_name)))
$($(1)_objdir)/$(6)/$(2)r.cc: $(4) $$($(2)r_header) $($(1)_config) $(foreach l,$($(1)_LOC_USE) $($(1)_LOC_FLAGS_USE_SOURCE_ONLY),$(WORKINGDIR)/rootpcms/$($l))
	@$(CMD_echo) "01:$(CMD_rm) -f $(7)/$$($(1)_pcm_name) $(WORKINGDIR)/rootpcms/$(1)" > $$(call AutoCleanFile,$$<,lcgdict)
ifeq ($(strip $($(1)_CXXMODULES)),1)
	@$$(call generate_lcgdict_cxxmodule,$(1),$(1),$(4),$$($(2)r_header),$(5),$7)
else
	@$$(call generate_lcgdict,$(1),$(1),$(4),$$($(2)r_header),$(5),$7)
endif
$($(1)_objdir)/$(6)/$(2)r.cc.$(OBJEXT): $($(1)_objdir)/$(6)/$(2)r.cc
	@$$(call compile_lcgdict,$(1),$(1),$3)
$(7)/$$($(1)_pcm_name): $($(1)_objdir)/$(6)/$(2)r.cc
	@[ -f $$< ] || $(CMD_rm) -f $$@
$(WORKINGDIR)/rootpcms/$(2): $(7)/$$($(1)_pcm_name)
	@[ -d $$(@D) ] || $(CMD_mkdir) -p $$(@D) && $(CMD_touch) $$@
endef

ifneq ($(strip $(wildcard $(RELEASETOP)/$(RELEASE_CXXMODULES_DIR))),)
$(WORKINGDIR)/release.cxxmodule:
	@$(CMD_mkdir) -p $(CXXMODULES_DIR) &&\
	$(CMD_rm) -rf $(CXXMODULES_DIR) &&\
	$(CMD_cp) -rf $(RELEASETOP)/$(RELEASE_CXXMODULES_DIR) $(LOCALTOP)/$(CXXMODULES_DIR) &&\
	$(CMD_find) $(LOCALTOP)/$(CXXMODULES_DIR) -name cxxmodule -type f | $(CMD_xargs) $(CMD_sed) -i -e 's|"$(CXXMODULES_DIR_RELPAH)/|"$(RELEASETOP)/|' &&\
	$(CMD_touch) $@
else
$(WORKINGDIR)/release.cxxmodule:
	@$(CMD_touch) $@
endif

post_release_build+=00-copy-modulemap
00-copy-modulemap: $(WORKINGDIR)/release.cxxmodule
	@if [ -d $(CXXMODULES_DIR) ] ; then \
	  $(CMD_rm) -rf $(RELEASE_CXXMODULES_DIR) &&\
	  $(CMD_mkdir) -p $$(basename $(RELEASE_CXXMODULES_DIR)) &&\
	  $(CMD_mv) $(CXXMODULES_DIR) $(RELEASE_CXXMODULES_DIR);\
	fi

$(WORKINGDIR)/rootpcms/%:
	@[ -d $(@D) ] || $(CMD_mkdir) -p $(@D) && $(CMD_touch) $@
